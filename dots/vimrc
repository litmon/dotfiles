
" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2008 Dec 17
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
	finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
	set nobackup		" do not keep a backup file, use versions instead
else
	set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
	set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
	syntax on
	set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

	" Enable file type detection.
	" Use the default filetype settings, so that mail gets 'tw' set to 72,
	" 'cindent' is on in C files, etc.
	" Also load indent files, to automatically do language-dependent indenting.
	filetype plugin indent on

	" Put these in an autocmd group, so that we can delete them easily.
	augroup vimrcEx
		au!

		" For all text files set 'textwidth' to 78 characters.
		autocmd FileType text setlocal textwidth=78

		" When editing a file, always jump to the last known cursor position.
		" Don't do it when the position is invalid or when inside an event handler
		" (happens when dropping a file on gvim).
		" Also don't do it when the mark is in the first line, that is the default
		" position when opening a file.
		autocmd BufReadPost *
					\ if line("'\"") > 1 && line("'\"") <= line("$") |
					\   exe "normal! g`\"" |
					\ endif

	augroup END

else

	set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
	command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
				\ | wincmd p | diffthis
endif


"==================================================================
" Vim 設定
"==================================================================

" vimrcを保存した時に即時反映
augroup source_vimrc
  autocmd!
  autocmd BufWritePost .vimrc source $MYVIMRC
augroup END

" 色設定
colorscheme moncolor
highlight Constant ctermfg=Yellow

" シンタックス
syntax on

" インデント
set autoindent
set smartindent

" 行番号表示
set number

" ステータスライン表示
set laststatus=2

" <TAB>の対応する空白の数
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2

" カーソルを行頭末で止まらないようにする
set whichwrap=b,s,h,l,<,>,[,l]
" 大文字小文字を区別しない
set ignorecase

" コマンドライン補完
set wildmode=list,full

" markdownを編集するときのカラーハイライトを適用
augroup markdown
  autocmd!
  au BufNewFile,BufRead *.md :set filetype=markdown
augroup END

"==================================================================
" Key Mapping
"==================================================================
" キーマップ 検索でカーソルが動かないようにする
nnoremap * *N
nnoremap # #N
nnoremap g* g*N
nnoremap g# g#N

" visualモードで選択した部分を * で検索
vnoremap * "zy:let @/ = @z<CR>n

" キーマップ タブ
nnoremap to :tabnew<space>
nnoremap <silent> > :tabnext<cr>
nnoremap <silent> < :tabprevious<cr>

" 文字列検索後のハイライトを消す
nnoremap <ESC><ESC> :nohlsearch<CR><ESC>

" 挿入モードでCtr-D Delete
inoremap <C-D> <Delete>

" カーソル移動
nnoremap j gj
nnoremap k gk

" バッファ関連
"nnoremap <silent>bp :bprevious<CR>
"nnoremap <silent>bn :bnext<CR>
"nnoremap <silent>bb :b#<CR>

"==================================================================
" 保存時に行末の空白を除去する
"==================================================================
" autocmd BufWritePre * :%s/\s\+$//ge

"==================================================================
" 全角スペースを目立たせる
"==================================================================
function! ZenkakuSpace()
  highlight ZenkakuSpace cterm=reverse ctermfg=DarkMagenta gui=reverse guifg=DarkMagenta
endfunction

if has('syntax')
  augroup ZenkakuSpace
    autocmd!
    autocmd ColorScheme       * call ZenkakuSpace()
    autocmd VimEnter,WinEnter * match ZenkakuSpace /　/
  augroup END
  call ZenkakuSpace()
endif

"==================================================================
" NeoBundle
"==================================================================
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
  call neobundle#begin(expand('~/.vim/bundle/'))

  NeoBundle 'Shougo/neobundle.vim'
  NeoBundle 'Shougo/vimproc', {
        \ 'build' : {
        \ 'windows' : 'make -f make_mingw32.mak',
        \ 'cygwin' : 'make -f make_cygwin.mak',
        \ 'mac' : 'make -f make_mac.mak',
        \ 'unix' : 'make -f make_unix.mak',
        \ },
        \ }

  " package一覧
  NeoBundle 'kana/vim-surround'
  NeoBundle 'h1mesuke/vim-alignta'
  NeoBundle 'rking/ag.vim'
  NeoBundle 'mattn/emmet-vim'
  NeoBundle 'hail2u/vim-css3-syntax'
  NeoBundle 'xolox/vim-session',{'depends':'xolox/vim-misc'}
  NeoBundle 'altercation/vim-colors-solarized'
  NeoBundle 'croaker/mustang-vim'
  NeoBundle 'jeffreyiacono/vim-colors-wombat'
  NeoBundle 'nanotech/jellybeans.vim'
  NeoBundle 'vim-scripts/Lucius'
  NeoBundle 'vim-scripts/Zenburn'
  NeoBundle 'mrkn/mrkn256.vim'
  NeoBundle 'jpo/vim-railscasts-theme'
  NeoBundle 'therubymug/vim-pyte'
  NeoBundle 'tomasr/molokai'
  NeoBundle 'Shougo/unite.vim'
  NeoBundle 'ujihisa/unite-colorscheme'
  NeoBundle 'scrooloose/nerdtree'
  NeoBundle 'ctrlpvim/ctrlp.vim'
  NeoBundle 'tpope/vim-rails'
  NeoBundle 'tyru/vim-altercmd'
  NeoBundle 'slim-template/vim-slim'
  NeoBundle 'aharisu/vim_goshrepl'
  NeoBundle 'thinca/vim-quickrun'
  NeoBundle 'sudar/vim-arduino-syntax'
  NeoBundle 'peterhoeg/vim-qml'
  NeoBundle 'daisuzu/translategoogle.vim'

  call neobundle#end()
endif

syntax on
filetype on
filetype plugin indent on

"==================================================================
" ag.vim 設定
"==================================================================
" insert modeで開始
let g:unite_enable_start_insert = 1

" 大文字小文字を区別しない
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1

" grep検索
nnoremap <silent> ,g  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>

" カーソル位置の単語をgrep検索
nnoremap <silent> ,cg :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>

" grep検索結果の再呼出
nnoremap <silent> ,r  :<C-u>UniteResume search-buffer<CR>

" unite grep に ag(The Silver Searcher) を使う
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif

"==================================================================
""" emmet.vim 各種設定
"==================================================================
let g:user_emmet_settings = {'lang' : 'ja'}


"==================================================================
" window保存
"==================================================================
" 保存したいディレクトリで
" mkdir .vimsessions
" vimを開いて :SaveSession
" 現在のディレクトリ直下の .vimsessions/ を取得
let s:local_session_directory = xolox#misc#path#merge(getcwd(), '.vimsessions')
" ディレクトリがあれば
if isdirectory(s:local_session_directory)
  " session保存ディレクトリをそのディレクトリの設定
  let g:session_directory = s:local_session_directory
  " vimを辞める時に自動保存
  let g:session_autosave = 'yes'
  " 引数なしでvimを起動した時にsession保存ディレクトリのdefault.vimを開く
  let g:session_autoload = 'yes'
else
  let g:session_autosave = 'no'
  let g:session_autoload = 'no'
endif
unlet s:local_session_directory

"==================================================================
" ColorScheme
"==================================================================
" solarized カラースキーム
" mustang カラースキーム
" wombat カラースキーム
" jellybeans カラースキーム
" lucius カラースキーム
" zenburn カラースキーム
" mrkn256 カラースキーム
" railscasts カラースキーム
" pyte カラースキーム
" molokai カラースキーム
"==================================================================


"==================================================================
" NERDTreeの設定
"==================================================================
" <C-e>でNERDTreeをオンオフ いつでもどこでも
nnoremap <silent> <C-e>      :NERDTreeToggle<CR>
vnoremap <silent> <C-e> <Esc>:NERDTreeToggle<CR>
onoremap <silent> <C-e>      :NERDTreeToggle<CR>
inoremap <silent> <C-e> <Esc>:NERDTreeToggle<CR>
cnoremap <silent> <C-e> <C-u>:NERDTreeToggle<CR>
" 引数なしでvimを開いたらNERDTreeを起動、
" 引数ありならNERDTreeは起動しない、引数で渡されたファイルを開く
" autocmd vimenter * if !argc() | NERDTree | endif
" 他のバッファをすべて閉じた時にNERDTreeが開いていたらNERDTreeも一緒に閉じる
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" 無視するファイルを設定する
let g:NERDTreeIgnore=['\.clean$', '\.swp$', '\.bak$', '\~$']


"==================================================================
" rails.vimの設定
"==================================================================
" commandのリマッピング(vim-altercmdを使用)
augroup rails
  autocmd!
  autocmd User Rails AlterCommand r R
  autocmd User Rails AlterCommand rc Rcontroller
  autocmd User Rails AlterCommand rm Rmodel
  autocmd User Rails AlterCommand rv Rview
augroup END

"==================================================================
" gosh_repl.vimの設定
"==================================================================
" 選択範囲のプログラムを実行
augroup gosh
  autocmd!
  au BufNewFile,BufRead *.scm vmap <CR> <Plug>(gosh_repl_send_block)
augroup END


"==================================================================
" quickrun.vimの設定
"==================================================================
let g:quickrun_config = {
      \   "_" : {
      \       "runner" : "vimproc",
      \       "runner/vimproc/updatetime" : 10
      \   },
      \}
augroup quickrun
  autocmd!
  " <C-c> -> quit QuickRun
  " quickrun.vim が実行していない場合には <C-c> を呼び出す
  au BufNewFile,BufRead * nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"

  " <C-q> -> execute QuickRun
  au BufNewFile,BufRead * nnoremap <silent> <C-q> :QuickRun<CR>
augroup END

"==================================================================
" Ruby Guardfileのシンタックスカラーハイライト
"==================================================================
augroup rubySyntax
  autocmd!
  au BufRead,BufNewFile Guardfile set filetype=ruby
augroup END

